// ------------------------------------------------------------------------------
//  <auto-generated>
//      This code was generated by coded UI test builder.
//      Version: 12.0.0.0
//
//      Changes to this file may cause incorrect behavior and will be lost if
//      the code is regenerated.
//  </auto-generated>
// ------------------------------------------------------------------------------

using System.IO;
using System.Diagnostics;

namespace UITestProject
{
    using System;
    using System.CodeDom.Compiler;
    using System.Collections.Generic;
    using System.Drawing;
    using System.Text.RegularExpressions;
    using System.Windows.Input;
    using Microsoft.VisualStudio.TestTools.UITest.Extension;
    using Microsoft.VisualStudio.TestTools.UITesting;
    using Microsoft.VisualStudio.TestTools.UITesting.WinControls;
    using Microsoft.VisualStudio.TestTools.UITesting.WpfControls;
    using Microsoft.VisualStudio.TestTools.UnitTesting;
    using Keyboard = Microsoft.VisualStudio.TestTools.UITesting.Keyboard;
    using Mouse = Microsoft.VisualStudio.TestTools.UITesting.Mouse;
    using MouseButtons = System.Windows.Forms.MouseButtons;
    
    
    [GeneratedCode("Coded UITest Builder", "12.0.21005.1")]
    public partial class UIMap
    {
        
        /// <summary>
        /// Démarre l'IHM
        /// </summary>
        public void StartIHM()
        {
            #region Variable Declarations
            WinButton uIDémarrerButton = this.UIDémarrerWindow.UIDémarrerButton;
            WinMenuItem uIOrdinateurMenuItem = this.UIMenuDémarrerWindow.UIItemWindow.UIMenuDémarrerClient.UIOrdinateurMenuItem;
            WinTreeItem uIDocumentsTreeItem = this.UIOrdinateurWindow.UIArborescenceWindow.UIArborescenceTree.UIBureauTreeItem.UIBibliothèquesTreeItem.UIDocumentsTreeItem;
            WinEdit uINomEdit = this.UIDocumentsWindow.UIItemWindow.UIVisualStudio2012ListItem.UINomEdit;
            WinEdit uINomEdit1 = this.UIDocumentsWindow.UIItemWindow1.UIProjectsListItem.UINomEdit;
            WinEdit uINomEdit2 = this.UIDocumentsWindow.UIItemWindow2.UIProjetPOOListItem.UINomEdit;
            WinEdit uINomEdit3 = this.UIDocumentsWindow.UIItemWindow3.UIIHMListItem.UINomEdit;
            WinEdit uINomEdit4 = this.UIDocumentsWindow.UIItemWindow4.UIBinListItem.UINomEdit;
            WinEdit uINomEdit5 = this.UIDocumentsWindow.UIItemWindow5.UIDebugListItem.UINomEdit;
            WinEdit uINomEdit6 = this.UIDocumentsWindow.UIItemWindow6.UIIHMListItem.UINomEdit;
            #endregion

            // Click 'Démarrer' button
            Mouse.Click(uIDémarrerButton, new Point(22, 41));

            // Click 'Ordinateur' menu item
            Mouse.Click(uIOrdinateurMenuItem, new Point(95, 26));

            // Click 'Bureau' -> 'Bibliothèques' -> 'Documents' tree item
            Mouse.Click(uIDocumentsTreeItem, new Point(47, 15));

            // Click 'Nom' text box
            Mouse.Click(uINomEdit, new Point(124, 14));

            // Double-Click 'Nom' text box
            Mouse.DoubleClick(uINomEdit, new Point(124, 14));

            // Double-Click 'Nom' text box
            Mouse.DoubleClick(uINomEdit1, new Point(80, 17));

            // Double-Click 'Nom' text box
            Mouse.DoubleClick(uINomEdit2, new Point(77, 15));

            // Double-Click 'Nom' text box
            Mouse.DoubleClick(uINomEdit3, new Point(80, 20));

            // Double-Click 'Nom' text box
            Mouse.DoubleClick(uINomEdit4, new Point(77, 11));

            // Double-Click 'Nom' text box
            Mouse.DoubleClick(uINomEdit5, new Point(77, 11));

            // Double-Click 'Nom' text box
            Mouse.DoubleClick(uINomEdit6, new Point(77, 11));
        }

        public void executeIHM(string fullPath)
        {
            ProcessStartInfo psi = new ProcessStartInfo();
            psi.FileName = Path.GetFileName(fullPath);
            psi.WorkingDirectory = Path.GetDirectoryName(fullPath);
            Process.Start(psi);
        }
        
        /// <summary>
        /// Appuie sur lancer partie
        /// </summary>
        public void LaunchGame()
        {
            #region Variable Declarations
            WpfButton uILancerPartieButton = this.UIStartUpWindowWindow.UILancerPartieButton;
            #endregion

            // Click 'Lancer Partie' button
            Mouse.Click(uILancerPartieButton, new Point(57, 9));
        }
        
        /// <summary>
        /// Vérifie que le champ de carte contient "demo"
        /// </summary>
        public void AssertDemoMap()
        {
            #region Variable Declarations
            WpfText uITypedecartedemoText1 = this.UIIHMPrincipaleWindow.UITypedecartedemoText.UITypedecartedemoText1;
            #endregion

            // Verify that the 'DisplayText' property of 'Type de carte : demo' label contains 'demo'
            StringAssert.Contains(uITypedecartedemoText1.DisplayText, this.AssertDemoMapExpectedValues.UITypedecartedemoText1DisplayText, "Carte demo pas chargée");
        }
        
        /// <summary>
        /// Ferme l'appli
        /// </summary>
        public void CloseApp()
        {
            #region Variable Declarations
            WpfTitleBar uIIHMPrincipaleTitleBar = this.UIIHMPrincipaleWindow.UIIHMPrincipaleTitleBar;
            WpfButton uIFermerButton = this.UIIHMPrincipaleWindow.UIIHMPrincipaleTitleBar.UIFermerButton;
            #endregion

            // Click 'IHM Principale' title bar
            Mouse.Click(uIIHMPrincipaleTitleBar, new Point(442, 9));

            // Click 'Fermer' button
            Mouse.Click(uIFermerButton, new Point(27, 12));
        }
        
        #region Properties
        public virtual AssertDemoMapExpectedValues AssertDemoMapExpectedValues
        {
            get
            {
                if ((this.mAssertDemoMapExpectedValues == null))
                {
                    this.mAssertDemoMapExpectedValues = new AssertDemoMapExpectedValues();
                }
                return this.mAssertDemoMapExpectedValues;
            }
        }
        
        public UIDémarrerWindow UIDémarrerWindow
        {
            get
            {
                if ((this.mUIDémarrerWindow == null))
                {
                    this.mUIDémarrerWindow = new UIDémarrerWindow();
                }
                return this.mUIDémarrerWindow;
            }
        }
        
        public UIMenuDémarrerWindow UIMenuDémarrerWindow
        {
            get
            {
                if ((this.mUIMenuDémarrerWindow == null))
                {
                    this.mUIMenuDémarrerWindow = new UIMenuDémarrerWindow();
                }
                return this.mUIMenuDémarrerWindow;
            }
        }
        
        public UIOrdinateurWindow UIOrdinateurWindow
        {
            get
            {
                if ((this.mUIOrdinateurWindow == null))
                {
                    this.mUIOrdinateurWindow = new UIOrdinateurWindow();
                }
                return this.mUIOrdinateurWindow;
            }
        }
        
        public UIDocumentsWindow UIDocumentsWindow
        {
            get
            {
                if ((this.mUIDocumentsWindow == null))
                {
                    this.mUIDocumentsWindow = new UIDocumentsWindow();
                }
                return this.mUIDocumentsWindow;
            }
        }
        
        public UIStartUpWindowWindow UIStartUpWindowWindow
        {
            get
            {
                if ((this.mUIStartUpWindowWindow == null))
                {
                    this.mUIStartUpWindowWindow = new UIStartUpWindowWindow();
                }
                return this.mUIStartUpWindowWindow;
            }
        }
        
        public UIIHMPrincipaleWindow UIIHMPrincipaleWindow
        {
            get
            {
                if ((this.mUIIHMPrincipaleWindow == null))
                {
                    this.mUIIHMPrincipaleWindow = new UIIHMPrincipaleWindow();
                }
                return this.mUIIHMPrincipaleWindow;
            }
        }
        #endregion
        
        #region Fields
        private AssertDemoMapExpectedValues mAssertDemoMapExpectedValues;
        
        private UIDémarrerWindow mUIDémarrerWindow;
        
        private UIMenuDémarrerWindow mUIMenuDémarrerWindow;
        
        private UIOrdinateurWindow mUIOrdinateurWindow;
        
        private UIDocumentsWindow mUIDocumentsWindow;
        
        private UIStartUpWindowWindow mUIStartUpWindowWindow;
        
        private UIIHMPrincipaleWindow mUIIHMPrincipaleWindow;
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'AssertDemoMap'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "12.0.21005.1")]
    public class AssertDemoMapExpectedValues
    {
        
        #region Fields
        /// <summary>
        /// Verify that the 'DisplayText' property of 'Type de carte : demo' label contains 'demo'
        /// </summary>
        public string UITypedecartedemoText1DisplayText = EGameType.DEMO.ToString().ToLower();
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "12.0.21005.1")]
    public class UIDémarrerWindow : WinWindow
    {
        
        public UIDémarrerWindow()
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.Name] = "Démarrer";
            this.SearchProperties[WinWindow.PropertyNames.ClassName] = "Button";
            this.WindowTitles.Add("Démarrer");
            #endregion
        }
        
        #region Properties
        public WinButton UIDémarrerButton
        {
            get
            {
                if ((this.mUIDémarrerButton == null))
                {
                    this.mUIDémarrerButton = new WinButton(this);
                    #region Search Criteria
                    this.mUIDémarrerButton.SearchProperties[WinButton.PropertyNames.Name] = "Démarrer";
                    this.mUIDémarrerButton.WindowTitles.Add("Démarrer");
                    #endregion
                }
                return this.mUIDémarrerButton;
            }
        }
        #endregion
        
        #region Fields
        private WinButton mUIDémarrerButton;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "12.0.21005.1")]
    public class UIMenuDémarrerWindow : WinWindow
    {
        
        public UIMenuDémarrerWindow()
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.Name] = "Menu Démarrer";
            this.SearchProperties[WinWindow.PropertyNames.ClassName] = "DV2ControlHost";
            this.WindowTitles.Add("Menu Démarrer");
            #endregion
        }
        
        #region Properties
        public UIItemWindow UIItemWindow
        {
            get
            {
                if ((this.mUIItemWindow == null))
                {
                    this.mUIItemWindow = new UIItemWindow(this);
                }
                return this.mUIItemWindow;
            }
        }
        #endregion
        
        #region Fields
        private UIItemWindow mUIItemWindow;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "12.0.21005.1")]
    public class UIItemWindow : WinWindow
    {
        
        public UIItemWindow(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.ControlId] = "7";
            this.WindowTitles.Add("Menu Démarrer");
            #endregion
        }
        
        #region Properties
        public UIMenuDémarrerClient UIMenuDémarrerClient
        {
            get
            {
                if ((this.mUIMenuDémarrerClient == null))
                {
                    this.mUIMenuDémarrerClient = new UIMenuDémarrerClient(this);
                }
                return this.mUIMenuDémarrerClient;
            }
        }
        #endregion
        
        #region Fields
        private UIMenuDémarrerClient mUIMenuDémarrerClient;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "12.0.21005.1")]
    public class UIMenuDémarrerClient : WinClient
    {
        
        public UIMenuDémarrerClient(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.WindowTitles.Add("Menu Démarrer");
            #endregion
        }
        
        #region Properties
        public WinMenuItem UIOrdinateurMenuItem
        {
            get
            {
                if ((this.mUIOrdinateurMenuItem == null))
                {
                    this.mUIOrdinateurMenuItem = new WinMenuItem(this);
                    #region Search Criteria
                    this.mUIOrdinateurMenuItem.SearchProperties[WinMenuItem.PropertyNames.Name] = "Ordinateur";
                    this.mUIOrdinateurMenuItem.WindowTitles.Add("Menu Démarrer");
                    #endregion
                }
                return this.mUIOrdinateurMenuItem;
            }
        }
        #endregion
        
        #region Fields
        private WinMenuItem mUIOrdinateurMenuItem;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "12.0.21005.1")]
    public class UIOrdinateurWindow : WinWindow
    {
        
        public UIOrdinateurWindow()
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.Name] = "Ordinateur";
            this.SearchProperties[WinWindow.PropertyNames.ClassName] = "CabinetWClass";
            this.WindowTitles.Add("Ordinateur");
            #endregion
        }
        
        #region Properties
        public UIArborescenceWindow UIArborescenceWindow
        {
            get
            {
                if ((this.mUIArborescenceWindow == null))
                {
                    this.mUIArborescenceWindow = new UIArborescenceWindow(this);
                }
                return this.mUIArborescenceWindow;
            }
        }
        #endregion
        
        #region Fields
        private UIArborescenceWindow mUIArborescenceWindow;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "12.0.21005.1")]
    public class UIArborescenceWindow : WinWindow
    {
        
        public UIArborescenceWindow(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.ControlId] = "100";
            this.WindowTitles.Add("Ordinateur");
            #endregion
        }
        
        #region Properties
        public UIArborescenceTree UIArborescenceTree
        {
            get
            {
                if ((this.mUIArborescenceTree == null))
                {
                    this.mUIArborescenceTree = new UIArborescenceTree(this);
                }
                return this.mUIArborescenceTree;
            }
        }
        #endregion
        
        #region Fields
        private UIArborescenceTree mUIArborescenceTree;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "12.0.21005.1")]
    public class UIArborescenceTree : WinTree
    {
        
        public UIArborescenceTree(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinTree.PropertyNames.Name] = "Contrôle Arborescence d’espace de noms";
            this.WindowTitles.Add("Ordinateur");
            #endregion
        }
        
        #region Properties
        public UIBureauTreeItem UIBureauTreeItem
        {
            get
            {
                if ((this.mUIBureauTreeItem == null))
                {
                    this.mUIBureauTreeItem = new UIBureauTreeItem(this);
                }
                return this.mUIBureauTreeItem;
            }
        }
        #endregion
        
        #region Fields
        private UIBureauTreeItem mUIBureauTreeItem;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "12.0.21005.1")]
    public class UIBureauTreeItem : WinTreeItem
    {
        
        public UIBureauTreeItem(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinTreeItem.PropertyNames.Name] = "Bureau";
            this.SearchProperties["Value"] = "0";
            this.WindowTitles.Add("Ordinateur");
            #endregion
        }
        
        #region Properties
        public UIBibliothèquesTreeItem UIBibliothèquesTreeItem
        {
            get
            {
                if ((this.mUIBibliothèquesTreeItem == null))
                {
                    this.mUIBibliothèquesTreeItem = new UIBibliothèquesTreeItem(this);
                }
                return this.mUIBibliothèquesTreeItem;
            }
        }
        #endregion
        
        #region Fields
        private UIBibliothèquesTreeItem mUIBibliothèquesTreeItem;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "12.0.21005.1")]
    public class UIBibliothèquesTreeItem : WinTreeItem
    {
        
        public UIBibliothèquesTreeItem(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinTreeItem.PropertyNames.Name] = "Bibliothèques";
            this.SearchProperties["Value"] = "1";
            this.SearchConfigurations.Add(SearchConfiguration.ExpandWhileSearching);
            this.SearchConfigurations.Add(SearchConfiguration.NextSibling);
            this.WindowTitles.Add("Ordinateur");
            #endregion
        }
        
        #region Properties
        public WinTreeItem UIDocumentsTreeItem
        {
            get
            {
                if ((this.mUIDocumentsTreeItem == null))
                {
                    this.mUIDocumentsTreeItem = new WinTreeItem(this);
                    #region Search Criteria
                    this.mUIDocumentsTreeItem.SearchProperties[WinTreeItem.PropertyNames.Name] = "Documents";
                    this.mUIDocumentsTreeItem.SearchProperties["Value"] = "2";
                    this.mUIDocumentsTreeItem.SearchConfigurations.Add(SearchConfiguration.ExpandWhileSearching);
                    this.mUIDocumentsTreeItem.SearchConfigurations.Add(SearchConfiguration.NextSibling);
                    this.mUIDocumentsTreeItem.WindowTitles.Add("Ordinateur");
                    #endregion
                }
                return this.mUIDocumentsTreeItem;
            }
        }
        #endregion
        
        #region Fields
        private WinTreeItem mUIDocumentsTreeItem;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "12.0.21005.1")]
    public class UIDocumentsWindow : WinWindow
    {
        
        public UIDocumentsWindow()
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.Name] = "Documents";
            this.SearchProperties[WinWindow.PropertyNames.ClassName] = "CabinetWClass";
            this.WindowTitles.Add("Documents");
            this.WindowTitles.Add("Visual Studio 2012");
            this.WindowTitles.Add("Projects");
            this.WindowTitles.Add("ProjetPOO");
            this.WindowTitles.Add("IHM");
            this.WindowTitles.Add("bin");
            this.WindowTitles.Add("Debug");
            #endregion
        }
        
        #region Properties
        public UIItemWindow1 UIItemWindow
        {
            get
            {
                if ((this.mUIItemWindow == null))
                {
                    this.mUIItemWindow = new UIItemWindow1(this);
                }
                return this.mUIItemWindow;
            }
        }
        
        public UIItemWindow11 UIItemWindow1
        {
            get
            {
                if ((this.mUIItemWindow1 == null))
                {
                    this.mUIItemWindow1 = new UIItemWindow11(this);
                }
                return this.mUIItemWindow1;
            }
        }
        
        public UIItemWindow2 UIItemWindow2
        {
            get
            {
                if ((this.mUIItemWindow2 == null))
                {
                    this.mUIItemWindow2 = new UIItemWindow2(this);
                }
                return this.mUIItemWindow2;
            }
        }
        
        public UIItemWindow3 UIItemWindow3
        {
            get
            {
                if ((this.mUIItemWindow3 == null))
                {
                    this.mUIItemWindow3 = new UIItemWindow3(this);
                }
                return this.mUIItemWindow3;
            }
        }
        
        public UIItemWindow4 UIItemWindow4
        {
            get
            {
                if ((this.mUIItemWindow4 == null))
                {
                    this.mUIItemWindow4 = new UIItemWindow4(this);
                }
                return this.mUIItemWindow4;
            }
        }
        
        public UIItemWindow5 UIItemWindow5
        {
            get
            {
                if ((this.mUIItemWindow5 == null))
                {
                    this.mUIItemWindow5 = new UIItemWindow5(this);
                }
                return this.mUIItemWindow5;
            }
        }
        
        public UIItemWindow6 UIItemWindow6
        {
            get
            {
                if ((this.mUIItemWindow6 == null))
                {
                    this.mUIItemWindow6 = new UIItemWindow6(this);
                }
                return this.mUIItemWindow6;
            }
        }
        #endregion
        
        #region Fields
        private UIItemWindow1 mUIItemWindow;
        
        private UIItemWindow11 mUIItemWindow1;
        
        private UIItemWindow2 mUIItemWindow2;
        
        private UIItemWindow3 mUIItemWindow3;
        
        private UIItemWindow4 mUIItemWindow4;
        
        private UIItemWindow5 mUIItemWindow5;
        
        private UIItemWindow6 mUIItemWindow6;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "12.0.21005.1")]
    public class UIItemWindow1 : WinWindow
    {
        
        public UIItemWindow1(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.AccessibleName] = "Vue d’éléments";
            this.SearchProperties[WinWindow.PropertyNames.ClassName] = "DirectUIHWND";
            this.WindowTitles.Add("Documents");
            #endregion
        }
        
        #region Properties
        public UIVisualStudio2012ListItem UIVisualStudio2012ListItem
        {
            get
            {
                if ((this.mUIVisualStudio2012ListItem == null))
                {
                    this.mUIVisualStudio2012ListItem = new UIVisualStudio2012ListItem(this);
                }
                return this.mUIVisualStudio2012ListItem;
            }
        }
        #endregion
        
        #region Fields
        private UIVisualStudio2012ListItem mUIVisualStudio2012ListItem;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "12.0.21005.1")]
    public class UIVisualStudio2012ListItem : WinListItem
    {
        
        public UIVisualStudio2012ListItem(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinListItem.PropertyNames.Name] = "Visual Studio 2012";
            this.WindowTitles.Add("Documents");
            #endregion
        }
        
        #region Properties
        public WinEdit UINomEdit
        {
            get
            {
                if ((this.mUINomEdit == null))
                {
                    this.mUINomEdit = new WinEdit(this);
                    #region Search Criteria
                    this.mUINomEdit.SearchProperties[WinEdit.PropertyNames.Name] = "Nom";
                    this.mUINomEdit.WindowTitles.Add("Documents");
                    #endregion
                }
                return this.mUINomEdit;
            }
        }
        #endregion
        
        #region Fields
        private WinEdit mUINomEdit;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "12.0.21005.1")]
    public class UIItemWindow11 : WinWindow
    {
        
        public UIItemWindow11(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.AccessibleName] = "Vue d’éléments";
            this.SearchProperties[WinWindow.PropertyNames.ClassName] = "DirectUIHWND";
            this.WindowTitles.Add("Visual Studio 2012");
            #endregion
        }
        
        #region Properties
        public UIProjectsListItem UIProjectsListItem
        {
            get
            {
                if ((this.mUIProjectsListItem == null))
                {
                    this.mUIProjectsListItem = new UIProjectsListItem(this);
                }
                return this.mUIProjectsListItem;
            }
        }
        #endregion
        
        #region Fields
        private UIProjectsListItem mUIProjectsListItem;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "12.0.21005.1")]
    public class UIProjectsListItem : WinListItem
    {
        
        public UIProjectsListItem(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinListItem.PropertyNames.Name] = "Projects";
            this.WindowTitles.Add("Visual Studio 2012");
            #endregion
        }
        
        #region Properties
        public WinEdit UINomEdit
        {
            get
            {
                if ((this.mUINomEdit == null))
                {
                    this.mUINomEdit = new WinEdit(this);
                    #region Search Criteria
                    this.mUINomEdit.SearchProperties[WinEdit.PropertyNames.Name] = "Nom";
                    this.mUINomEdit.WindowTitles.Add("Visual Studio 2012");
                    #endregion
                }
                return this.mUINomEdit;
            }
        }
        #endregion
        
        #region Fields
        private WinEdit mUINomEdit;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "12.0.21005.1")]
    public class UIItemWindow2 : WinWindow
    {
        
        public UIItemWindow2(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.AccessibleName] = "Vue d’éléments";
            this.SearchProperties[WinWindow.PropertyNames.ClassName] = "DirectUIHWND";
            this.WindowTitles.Add("Projects");
            #endregion
        }
        
        #region Properties
        public UIProjetPOOListItem UIProjetPOOListItem
        {
            get
            {
                if ((this.mUIProjetPOOListItem == null))
                {
                    this.mUIProjetPOOListItem = new UIProjetPOOListItem(this);
                }
                return this.mUIProjetPOOListItem;
            }
        }
        #endregion
        
        #region Fields
        private UIProjetPOOListItem mUIProjetPOOListItem;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "12.0.21005.1")]
    public class UIProjetPOOListItem : WinListItem
    {
        
        public UIProjetPOOListItem(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinListItem.PropertyNames.Name] = "ProjetPOO";
            this.WindowTitles.Add("Projects");
            #endregion
        }
        
        #region Properties
        public WinEdit UINomEdit
        {
            get
            {
                if ((this.mUINomEdit == null))
                {
                    this.mUINomEdit = new WinEdit(this);
                    #region Search Criteria
                    this.mUINomEdit.SearchProperties[WinEdit.PropertyNames.Name] = "Nom";
                    this.mUINomEdit.WindowTitles.Add("Projects");
                    #endregion
                }
                return this.mUINomEdit;
            }
        }
        #endregion
        
        #region Fields
        private WinEdit mUINomEdit;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "12.0.21005.1")]
    public class UIItemWindow3 : WinWindow
    {
        
        public UIItemWindow3(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.AccessibleName] = "Vue d’éléments";
            this.SearchProperties[WinWindow.PropertyNames.ClassName] = "DirectUIHWND";
            this.WindowTitles.Add("ProjetPOO");
            #endregion
        }
        
        #region Properties
        public UIIHMListItem UIIHMListItem
        {
            get
            {
                if ((this.mUIIHMListItem == null))
                {
                    this.mUIIHMListItem = new UIIHMListItem(this);
                }
                return this.mUIIHMListItem;
            }
        }
        #endregion
        
        #region Fields
        private UIIHMListItem mUIIHMListItem;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "12.0.21005.1")]
    public class UIIHMListItem : WinListItem
    {
        
        public UIIHMListItem(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinListItem.PropertyNames.Name] = "IHM";
            this.WindowTitles.Add("ProjetPOO");
            #endregion
        }
        
        #region Properties
        public WinEdit UINomEdit
        {
            get
            {
                if ((this.mUINomEdit == null))
                {
                    this.mUINomEdit = new WinEdit(this);
                    #region Search Criteria
                    this.mUINomEdit.SearchProperties[WinEdit.PropertyNames.Name] = "Nom";
                    this.mUINomEdit.WindowTitles.Add("ProjetPOO");
                    #endregion
                }
                return this.mUINomEdit;
            }
        }
        #endregion
        
        #region Fields
        private WinEdit mUINomEdit;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "12.0.21005.1")]
    public class UIItemWindow4 : WinWindow
    {
        
        public UIItemWindow4(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.AccessibleName] = "Vue d’éléments";
            this.SearchProperties[WinWindow.PropertyNames.ClassName] = "DirectUIHWND";
            this.WindowTitles.Add("IHM");
            #endregion
        }
        
        #region Properties
        public UIBinListItem UIBinListItem
        {
            get
            {
                if ((this.mUIBinListItem == null))
                {
                    this.mUIBinListItem = new UIBinListItem(this);
                }
                return this.mUIBinListItem;
            }
        }
        #endregion
        
        #region Fields
        private UIBinListItem mUIBinListItem;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "12.0.21005.1")]
    public class UIBinListItem : WinListItem
    {
        
        public UIBinListItem(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinListItem.PropertyNames.Name] = "bin";
            this.WindowTitles.Add("IHM");
            #endregion
        }
        
        #region Properties
        public WinEdit UINomEdit
        {
            get
            {
                if ((this.mUINomEdit == null))
                {
                    this.mUINomEdit = new WinEdit(this);
                    #region Search Criteria
                    this.mUINomEdit.SearchProperties[WinEdit.PropertyNames.Name] = "Nom";
                    this.mUINomEdit.WindowTitles.Add("IHM");
                    #endregion
                }
                return this.mUINomEdit;
            }
        }
        #endregion
        
        #region Fields
        private WinEdit mUINomEdit;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "12.0.21005.1")]
    public class UIItemWindow5 : WinWindow
    {
        
        public UIItemWindow5(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.AccessibleName] = "Vue d’éléments";
            this.SearchProperties[WinWindow.PropertyNames.ClassName] = "DirectUIHWND";
            this.WindowTitles.Add("bin");
            #endregion
        }
        
        #region Properties
        public UIDebugListItem UIDebugListItem
        {
            get
            {
                if ((this.mUIDebugListItem == null))
                {
                    this.mUIDebugListItem = new UIDebugListItem(this);
                }
                return this.mUIDebugListItem;
            }
        }
        #endregion
        
        #region Fields
        private UIDebugListItem mUIDebugListItem;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "12.0.21005.1")]
    public class UIDebugListItem : WinListItem
    {
        
        public UIDebugListItem(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinListItem.PropertyNames.Name] = "Debug";
            this.WindowTitles.Add("bin");
            #endregion
        }
        
        #region Properties
        public WinEdit UINomEdit
        {
            get
            {
                if ((this.mUINomEdit == null))
                {
                    this.mUINomEdit = new WinEdit(this);
                    #region Search Criteria
                    this.mUINomEdit.SearchProperties[WinEdit.PropertyNames.Name] = "Nom";
                    this.mUINomEdit.WindowTitles.Add("bin");
                    #endregion
                }
                return this.mUINomEdit;
            }
        }
        #endregion
        
        #region Fields
        private WinEdit mUINomEdit;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "12.0.21005.1")]
    public class UIItemWindow6 : WinWindow
    {
        
        public UIItemWindow6(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.AccessibleName] = "Vue d’éléments";
            this.SearchProperties[WinWindow.PropertyNames.ClassName] = "DirectUIHWND";
            this.WindowTitles.Add("Debug");
            #endregion
        }
        
        #region Properties
        public UIIHMListItem1 UIIHMListItem
        {
            get
            {
                if ((this.mUIIHMListItem == null))
                {
                    this.mUIIHMListItem = new UIIHMListItem1(this);
                }
                return this.mUIIHMListItem;
            }
        }
        #endregion
        
        #region Fields
        private UIIHMListItem1 mUIIHMListItem;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "12.0.21005.1")]
    public class UIIHMListItem1 : WinListItem
    {
        
        public UIIHMListItem1(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinListItem.PropertyNames.Name] = "IHM";
            this.WindowTitles.Add("Debug");
            #endregion
        }
        
        #region Properties
        public WinEdit UINomEdit
        {
            get
            {
                if ((this.mUINomEdit == null))
                {
                    this.mUINomEdit = new WinEdit(this);
                    #region Search Criteria
                    this.mUINomEdit.SearchProperties[WinEdit.PropertyNames.Name] = "Nom";
                    this.mUINomEdit.WindowTitles.Add("Debug");
                    #endregion
                }
                return this.mUINomEdit;
            }
        }
        #endregion
        
        #region Fields
        private WinEdit mUINomEdit;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "12.0.21005.1")]
    public class UIStartUpWindowWindow : WpfWindow
    {
        
        public UIStartUpWindowWindow()
        {
            #region Search Criteria
            this.SearchProperties[WpfWindow.PropertyNames.Name] = "StartUpWindow";
            this.SearchProperties.Add(new PropertyExpression(WpfWindow.PropertyNames.ClassName, "HwndWrapper", PropertyExpressionOperator.Contains));
            this.WindowTitles.Add("StartUpWindow");
            #endregion
        }
        
        #region Properties
        public WpfButton UILancerPartieButton
        {
            get
            {
                if ((this.mUILancerPartieButton == null))
                {
                    this.mUILancerPartieButton = new WpfButton(this);
                    #region Search Criteria
                    this.mUILancerPartieButton.SearchProperties[WpfButton.PropertyNames.AutomationId] = "StartUpButton";
                    this.mUILancerPartieButton.WindowTitles.Add("StartUpWindow");
                    #endregion
                }
                return this.mUILancerPartieButton;
            }
        }
        #endregion
        
        #region Fields
        private WpfButton mUILancerPartieButton;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "12.0.21005.1")]
    public class UIIHMPrincipaleWindow : WpfWindow
    {
        
        public UIIHMPrincipaleWindow()
        {
            #region Search Criteria
            this.SearchProperties[WpfWindow.PropertyNames.Name] = "IHM Principale";
            this.SearchProperties.Add(new PropertyExpression(WpfWindow.PropertyNames.ClassName, "HwndWrapper", PropertyExpressionOperator.Contains));
            this.WindowTitles.Add("IHM Principale");
            #endregion
        }
        
        #region Properties
        public UITypedecartedemoText UITypedecartedemoText
        {
            get
            {
                if ((this.mUITypedecartedemoText == null))
                {
                    this.mUITypedecartedemoText = new UITypedecartedemoText(this);
                }
                return this.mUITypedecartedemoText;
            }
        }
        
        public UIIHMPrincipaleTitleBar UIIHMPrincipaleTitleBar
        {
            get
            {
                if ((this.mUIIHMPrincipaleTitleBar == null))
                {
                    this.mUIIHMPrincipaleTitleBar = new UIIHMPrincipaleTitleBar(this);
                }
                return this.mUIIHMPrincipaleTitleBar;
            }
        }
        #endregion
        
        #region Fields
        private UITypedecartedemoText mUITypedecartedemoText;
        
        private UIIHMPrincipaleTitleBar mUIIHMPrincipaleTitleBar;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "12.0.21005.1")]
    public class UITypedecartedemoText : WpfText
    {
        
        public UITypedecartedemoText(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WpfText.PropertyNames.AutomationId] = "MapLabel";
            this.WindowTitles.Add("IHM Principale");
            #endregion
        }
        
        #region Properties
        public WpfText UITypedecartedemoText1
        {
            get
            {
                if ((this.mUITypedecartedemoText1 == null))
                {
                    this.mUITypedecartedemoText1 = new WpfText(this);
                    #region Search Criteria
                    this.mUITypedecartedemoText1.SearchProperties[WpfText.PropertyNames.Name] = "Type de carte : demo";
                    this.mUITypedecartedemoText1.SearchConfigurations.Add(SearchConfiguration.DisambiguateChild);
                    this.mUITypedecartedemoText1.WindowTitles.Add("IHM Principale");
                    #endregion
                }
                return this.mUITypedecartedemoText1;
            }
        }
        #endregion
        
        #region Fields
        private WpfText mUITypedecartedemoText1;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "12.0.21005.1")]
    public class UIIHMPrincipaleTitleBar : WpfTitleBar
    {
        
        public UIIHMPrincipaleTitleBar(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WpfTitleBar.PropertyNames.AutomationId] = "TitleBar";
            this.WindowTitles.Add("IHM Principale");
            #endregion
        }
        
        #region Properties
        public WpfButton UIFermerButton
        {
            get
            {
                if ((this.mUIFermerButton == null))
                {
                    this.mUIFermerButton = new WpfButton(this);
                    #region Search Criteria
                    this.mUIFermerButton.SearchProperties[WpfButton.PropertyNames.Name] = "Fermer";
                    this.mUIFermerButton.WindowTitles.Add("IHM Principale");
                    #endregion
                }
                return this.mUIFermerButton;
            }
        }
        #endregion
        
        #region Fields
        private WpfButton mUIFermerButton;
        #endregion
    }
}
